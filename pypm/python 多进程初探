Python 多进程初探

一、为什么要使用多进程

我们知道，Python(CPython)中的多线程不是真正的多线程。
是因为在CPython的实现中，为了保证同一时刻只有一个线程能够执行Python机器码，增加了一个互斥锁。就是GIL（全局解释器锁）。
所以为了在Python中为了利用多核，真正的实现并发编程，需要使用多进程。

二、Python中的multiprocess

Python为我们提供了multiprocessing库，支持子进程Process, 进程通信 Queue，Pipe，以及数据共享同步 Manager，Lock，RLock，Semaphore，Event，以及进程池（Pools)

2.1 Process
Process([group [, target [, name [, args [, kwargs]]]]])
target表示调用对象，args表示调用对象的位置参数元组。kwargs表示调用对象的字典。name是进程别名。

方法：is_alive()、join([timeout])、run()、start()、terminate()。Process以start()启动某个进程。

属性：daemon（要通过start()设置）、exitcode(进程在运行时为None、如果为–N，表示被信号N结束）、name、pid。其中daemon是父进程终止后自动终止，且自己不能产生新进程，必须在start()之前设置。

2.2 Lock
当多个进程需要访问共享资源的时候，Lock可以用来避免访问的冲突。

2.3 Semaphore
用来控制对共享资源的访问数量，例如池的最大连接数。

2.4 Event
Event用来实现进程间同步通信。

5. Queue
Queue是多进程安全的队列，可以使用Queue实现多进程之间的数据传递。put方法用以插入数据到队列中，put方法还有两个可选参数：blocked和timeout。如果blocked为True（默认值），并且timeout为正值，该方法会阻塞timeout指定的时间，直到该队列有剩余的空间。如果超时，会抛出Queue.Full异常。如果blocked为False，但该Queue已满，会立即抛出Queue.Full异常。
 
get方法可以从队列读取并且删除一个元素。同样，get方法有两个可选参数：blocked和timeout。如果blocked为True（默认值），并且timeout为正值，那么在等待时间内没有取到任何元素，会抛出Queue.Empty异常。如果blocked为False，有两种情况存在，如果Queue有一个值可用，则立即返回该值，否则，如果队列为空，则立即抛出Queue.Empty异常。

6 Pool
Pool是用来创建管理进程池的，当子进程非常多且需要控制子进程数量时可以使用此模块。
